using SourceGenerator.Blueprints;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SourceGenerator;
public static class FileSaver
{
    public static void SaveFiles(ICollection<Blueprint> blueprints, string assemblyName)
    {
        var directoryPath = Path.Combine(Path.GetDirectoryName(PathExtension.Path), @"src\AutoGenerated\");
        var path = Path.Combine(directoryPath, $"{assemblyName}");

        GenerateGlobalUsing(directoryPath);
        SetUsingForDtoIfExists(blueprints);
        SaveNotDtos([.. blueprints.Where(x => !x.IsDto)], path);
        SaveDtos([.. blueprints.Where(x => x.IsDto)], path);
    }

    private static void GenerateGlobalUsing(string directoryPath)
    {
        var sb = new StringBuilder()
            .AppendLine("//auto-generated")
            .AppendLine("global using System.Collections.Generic;")
            .AppendLine("global using System.Collections.Concurrent;")
            .AppendLine("global using System.Collections.Immutable;")
            .AppendLine("global using System.Collections.ObjectModel;");


        var path = Path.Combine(directoryPath, Constants.GlobalUsingsFileName);
        File.WriteAllText(path, sb.ToString());
    }

    private static void SetUsingForDtoIfExists(ICollection<Blueprint> Blueprints)
    {
        if (Blueprints.Any(x => x.IsDto))
        {
            foreach (var item in Blueprints)
            {
                item.SetAddDtoUsing();
            }
        }
    }

    private static void SaveNotDtos(ICollection<Blueprint> blueprints, string path)
    {
        if (Directory.Exists(path))
            Directory.Delete(path, true);

        if (blueprints.Count == 0)
            return;

        Save(blueprints, path);
    }

    private static void SaveDtos(ICollection<Blueprint> blueprints, string path)
    {
        if (!blueprints.Any(x => x.IsDto))
            return;

        var dtosPath = Path.Combine(path, Constants.DtosFolderName);

        Save(blueprints, dtosPath);
    }

    private static void Save(ICollection<Blueprint> blueprints, string path)
    {
        if (!Directory.Exists(path))
            Directory.CreateDirectory(path);

        Parallel.ForEach(blueprints, (blueprint) =>
        {
            var filePath = Path.Combine(path, blueprint.FileName);
            File.WriteAllText(filePath, blueprint.ToFullCode());
        });
    }
}
